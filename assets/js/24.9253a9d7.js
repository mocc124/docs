(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{303:function(t,e,a){"use strict";a.r(e);var r=a(12),n=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),e("p",[e("img",{attrs:{src:"/works/Git/img/28503711-4ea89b26144307a4.webp",alt:"常用命令参考"}})]),t._v(" "),e("p",[t._v("推荐资源：\n"),e("a",{attrs:{href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 官方文档"),e("OutboundLink")],1),t._v("、\n"),e("a",{attrs:{href:"https://www.conventionalcommits.org/zh-hans/v1.0.0/",target:"_blank",rel:"noopener noreferrer"}},[t._v("约定式提交规范"),e("OutboundLink")],1),t._v("、\n"),e("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2015/08/git-use-process.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("阮一峰 Git 使用规范流程"),e("OutboundLink")],1),t._v("、\n"),e("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("阮一峰 常用 Git 命令清单"),e("OutboundLink")],1),t._v("、\n"),e("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2014/06/git_remote.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("阮一峰 Git 远程操作详解"),e("OutboundLink")],1),t._v("、\n"),e("a",{attrs:{href:"https://zjdoc-gitguide.readthedocs.io/zh_CN/latest/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitGuide"),e("OutboundLink")],1),t._v("、\n"),e("a",{attrs:{href:"https://learngitbranching.js.org/?locale=zh_CN",target:"_blank",rel:"noopener noreferrer"}},[t._v("学习 Git 分支"),e("OutboundLink")],1),t._v("、\n"),e("a",{attrs:{href:"https://dangitgit.com/zh",target:"_blank",rel:"noopener noreferrer"}},[t._v("该死的 Git"),e("OutboundLink")],1),t._v("、\n"),e("a",{attrs:{href:"http://marklodato.github.io/visual-git-guide/index-zh-cn.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解 Git"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("以下内容仅仅只是基础内容，个人开发熟悉基础用法即可，进阶用法针对项目团队进行。")]),t._v(" "),e("h2",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),e("p",[t._v("Git 代表一个分布式版本控制系统，Git 是为了提高多人协作开发效率和文件管理而生。当成员统一修改并使用 Git 提交。Git 会自动创建一个项目版本，记录了不同文件的差异，也可以随时回退到某个提交时的状态。")]),t._v(" "),e("p",[t._v("在此之前之前，需要\n安装并配置 "),e("a",{attrs:{href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git"),e("OutboundLink")],1),t._v("、\n注册 "),e("a",{attrs:{href:"https://www.github.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub"),e("OutboundLink")],1),t._v("或"),e("a",{attrs:{href:"https://www.gitee.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitee"),e("OutboundLink")],1),t._v(" 账号、\n推荐了解 "),e("a",{attrs:{href:"https://learn.microsoft.com/zh-cn/powershell/scripting/overview?view=powershell-7.3",target:"_blank",rel:"noopener noreferrer"}},[t._v("PowerShell"),e("OutboundLink")],1),t._v("或"),e("a",{attrs:{href:""}},[t._v("cmd")]),t._v("命令")]),t._v(" "),e("p",[t._v("PowerShell 最基本的几个命令你需要知道：")]),t._v(" "),e("ul",[e("li",[t._v("pwd(print work directory) 显示当前终端会话所在目录位置")]),t._v(" "),e("li",[t._v("ls(list file) 显示当前目录下所有文件")]),t._v(" "),e("li",[t._v("cd(change directory) 切换目录，命令后跟路径（.表示当前路径，..表示上一级）")]),t._v(" "),e("li",[t._v('echo "content" > filename 创建 filename 文件，并填充指定内容')])]),t._v(" "),e("h2",{attrs:{id:"一、初始化项目与基础命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、初始化项目与基础命令"}},[t._v("#")]),t._v(" 一、初始化项目与基础命令")]),t._v(" "),e("p",[t._v("如果是首次使用 git 命令，需要设置用户名称与邮件地址，因为每一个 Git 的提交都会使用这些信息，并且它会写入到每一次提交中:")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" @user.name "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" @user.email "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"useremail@xxx.com"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.name\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.email\n")])])]),e("p",[t._v("使用命令"),e("code",[t._v("git init")]),t._v("初始化项目，成功会在当前目录生成 "),e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/106243588",target:"_blank",rel:"noopener noreferrer"}},[t._v(".git 目录"),e("OutboundLink")],1),t._v("，这个其实就是 Git 的版本库，.git 中有 stage（或者叫 index）的暂存区，还有 Git 为我们自动创建的第一个分支 master，以及指向 master 的一个指针叫 HEAD。")]),t._v(" "),e("ul",[e("li",[t._v("workspace: 工作区")]),t._v(" "),e("li",[t._v("index/Stage: 暂存区")]),t._v(" "),e("li",[t._v("Repository: 本地版本库")]),t._v(" "),e("li",[t._v("Remote: 远程版本库")])]),t._v(" "),e("p",[t._v("平时我们写的代码都是在工作区，执行 add 命令后提交到了暂存区，再执行 commit 命令后就把代码提交到了本地版本库，最后再执行 push 命令把本地代码提交到远程版本库。")]),t._v(" "),e("p",[t._v("文件状态：git 会追踪文件状态，工作区中的文件状态为 Untracked/Unstage(未追踪状态)，提交到了暂存区的文件则为 stage(追踪状态)。")]),t._v(" "),e("p",[t._v("项目初始化完成后，使用"),e("code",[t._v("git status")]),t._v("可以显示工作目录和暂存区的状态。将文件添加到暂存区，可以通过"),e("code",[t._v("git add <file|dir>")]),t._v("将指定文件添加到暂存区，如果提交文件数量较多，可以使用"),e("code",[t._v("git add .")]),t._v("将当前目录所有文件加入暂存区。")]),t._v(" "),e("p",[t._v("需要将暂存区文件提交到版本库时，需附加提交说明信息：使用"),e("code",[t._v("git commit")]),t._v("命令，可以打开 vim 编辑器添加说明信息，vim 编辑器基本指令:")]),t._v(" "),e("ul",[e("li",[t._v("q/i 进入编辑模式")]),t._v(" "),e("li",[t._v("esc 推出编辑模式")]),t._v(" "),e("li",[t._v(":wq 保存并推出 vim 编辑器")])]),t._v(" "),e("p",[t._v("也提供了"),e("code",[t._v('git commit -m "<message>"')]),t._v("，无需打开 vim 编辑器即可添加说明信息，这种方法更常用")]),t._v(" "),e("p",[t._v("每次提交都会生成日志信息，使用"),e("code",[t._v("git log")]),t._v("命令可以查看日志信息，包含了日志的 commit id、作者、邮箱以及提交日期。")]),t._v(" "),e("p",[t._v("补充：说明信息可以是任何文本消息，但是一般都是有相应风格。这不是必须的，但推荐遵循这个规范，常见的规范参考:"),e("a",{attrs:{href:"https://www.conventionalcommits.org/zh-hans/v1.0.0/",target:"_blank",rel:"noopener noreferrer"}},[t._v("约定式提交"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("完成了上面的 git add 和 git commit 命令就代表你的文件已经就绪，准备提交到 git 远程仓库。")]),t._v(" "),e("p",[t._v("补充：如果不想某个文件被提交到暂存区和远程仓库，可以将文件名添加到 .gitignore 文件中")]),t._v(" "),e("p",[t._v("思考：请思考下面的情况以及解决方案:")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# content(README.md): first commit content")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" README.md\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first commit"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# content(README.md): first commit content; rencurrence commit content;")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" README.md\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# content(README.md):")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# first commit content; rencurrence commit content; again commit content;")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ???")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("git diff")]),t._v(" 比较当前文件和暂存区文件差异")])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%92%A4%E6%B6%88%E6%93%8D%E4%BD%9C",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 基础-撤销操作"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"二、-版本回退"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、-版本回退"}},[t._v("#")]),t._v(" 二、 版本回退")]),t._v(" "),e("p",[e("code",[t._v("git log")]),t._v(" 获取提交版本的 commit id(HASH 值)\n使用命令"),e("code",[t._v("git reset --hard <commit id>")]),t._v(" 回退到指定版本，--hard 表示重置模式")]),t._v(" "),e("ul",[e("li",[t._v("--hard 模式，表示硬重置，即覆盖所有变更")]),t._v(" "),e("li",[t._v("--soft 模式")]),t._v(" "),e("li",[t._v("--mixed 模式")])]),t._v(" "),e("p",[t._v("恢复操作，可以使用"),e("code",[t._v("git reflog")]),t._v(" 查看到所有历史版本信息（显示当前的 HEAD 和它的祖先）")]),t._v(" "),e("h2",{attrs:{id:"三、-分支管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、-分支管理"}},[t._v("#")]),t._v(" 三、 分支管理")]),t._v(" "),e("p",[t._v("常用命令：")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("git branch")]),t._v(" 列出所有分支")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git branch <branchname>")]),t._v(" 创建分支")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git checkout <branchname>")]),t._v(" 切换分支，也可以使用 "),e("code",[t._v("git switch")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git checkout -b <branchname>")]),t._v(" 创建并切换分支，上面两个命令合并操作")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git switch -c <branchname>")]),t._v(" 也可以使用 switch 新建并切换分支，与上面命令相同")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git checkout -M <branchname>")]),t._v(" 切换"),e("strong",[t._v("主分支")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git merge <branchname>")]),t._v(" 合并分支（其它分支合并到当前分支）")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git diff master origin/master")]),t._v(" 比较本地版本库和远程版本库差异")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git branch -d <branchname>")]),t._v(" 删除分支，前提是分支已经合并")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git branch -D <branchname>")]),t._v(" 强制删除分支，慎用!!!")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git diff <branname> <branchname>")]),t._v(" 在两个分支之间比较差异")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git diff <id1><id1><id2>")]),t._v(" 比较两次提交之间的差异")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git diff --cached")]),t._v(" 比较暂存区和版本库差异")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git switch -c")]),t._v(" 来创建并切换分支，推荐使用这个新指令，因为 checkout 指令负担过重")])])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/26227256",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 由浅入深之分支管理"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"二、-提交到远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、-提交到远程仓库"}},[t._v("#")]),t._v(" 二、 提交到远程仓库")]),t._v(" "),e("p",[t._v("一般企业会选择使用 GitLab 或者 Bitbucket 搭建私有服务器仓库，或者选择一些公共云服务器仓库，如 Github、Gitee。")]),t._v(" "),e("p",[t._v("Github 已经在 2021 年开始需要生成个人 token 来 push 了，需要去 setting>>Deveioper settings>>Personal access tokens 进行响应设置才可以。")]),t._v(" "),e("p",[t._v("下面列出一些远程版本库常用命令：")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("git remote -v")]),t._v(" 列出已经存在的远程分支的详细信息")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git branch -r")]),t._v(" 查看远程分支")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git branch -a")]),t._v("查看所有分支。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git pull <远程主机名> <远程分支名>:<本地分支名>")]),t._v(" 从指定分支拉取远程仓库到本地工作区")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git clone <directory>")]),t._v(" 克隆远程仓库到本地")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git remote add <directory>")]),t._v(" 关联远程仓库")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git push -u origin <branchname>")]),t._v(" 将指定分支推送到 origin 主机，-u 表示记住这次提交，下次就可以使用"),e("code",[t._v("git push")]),t._v("不需指定主机与分支名")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git fetch")]),t._v(" 拉取远程仓库到本地版本库（取回所有分支）")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git fetch <远程主机名> <分支名>")]),t._v(" 拉取远程仓库特定分支的更新")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git checkout -b <分支名> <远程主机名>/<远程分支名>")]),t._v(" 基与远程分支创建一个新分支")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git diff")]),t._v(" 对比本地版本库、工作区、远程版本库之间的区别，如"),e("code",[t._v("git diff origin/master")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git log")]),t._v(" 查阅版本历史记录")])])]),t._v(" "),e("h2",{attrs:{id:"三、-git-协作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、-git-协作流程"}},[t._v("#")]),t._v(" 三、 Git 协作流程")]),t._v(" "),e("p",[t._v("参考资料："),e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2015/12/git-workflow.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("阮一峰 Git 工作流程"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("常见的有三种工作流")]),t._v(" "),e("ul",[e("li",[t._v("Git flow or "),e("a",{attrs:{href:"https://github.com/petervanderdoes/gitflow-avh",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git flow avh"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://docs.github.com/en/get-started/quickstart/github-flow",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github flow"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("Gitlab flow")])]),t._v(" "),e("h3",{attrs:{id:"分支介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支介绍"}},[t._v("#")]),t._v(" 分支介绍")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("master - 主分支，")]),t._v(" "),e("ul",[e("li",[t._v("提供给用户使用的正式版本；")]),t._v(" "),e("li",[t._v("不可在此分支进行 push 操作；")])])]),t._v(" "),e("li",[e("p",[t._v("dev - 开发分支，")]),t._v(" "),e("ul",[e("li",[t._v("基于 mastr 分支创建，需要发布时合并到 master")]),t._v(" "),e("li",[t._v("不可进行 push 操作")]),t._v(" "),e("li",[t._v("只能通过 "),e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/347918608",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pull Request"),e("OutboundLink")],1),t._v("的方式将个人分支合并到此分支；")]),t._v(" "),e("li",[t._v("开发过程中，要经常与此分支保持同步；")])])]),t._v(" "),e("li",[e("p",[t._v("feature/xxx - 特性分支，用于某个功能模块的开发")]),t._v(" "),e("ul",[e("li",[t._v("用于某个功能模块的开发；")]),t._v(" "),e("li",[t._v("功能模块开发任务完成后，通过 Pull Request 请求合并，管理员 Code Review 通过后，该分支会被合并到 dev 分支，该分支也会被删除；")]),t._v(" "),e("li",[t._v("分支由开发者个人管理和使用， 可以进行 push 操作；")]),t._v(" "),e("li",[t._v("开发过程中，此类分支要经常与 dev 分支保持同步；")])])]),t._v(" "),e("li",[e("p",[t._v("release/xxx - 预发布分支分支，发布正式版本前（即合并到 master 分支之前），我们可能需要有一个预发布的版本进行测试。")]),t._v(" "),e("ul",[e("li",[t._v("基于 dev 分支，预发布结束以后，必须合并进 dev 和 master 分支")]),t._v(" "),e("li",[t._v("用完即删")])])]),t._v(" "),e("li",[e("p",[t._v("hotfix/xxx - 补丁分支")]),t._v(" "),e("ul",[e("li",[t._v("紧急修复 Bug 的分支，由 master 分支创建，修补结束以后，再合并进 master 和 dev 分支")]),t._v(" "),e("li",[t._v("修复工作完成，它们就会被合并进 master 或 dev 分支 （仅能通过 Pull Request 的方式），然后就被删除")])])])]),t._v(" "),e("h3",{attrs:{id:"开发者工作流参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开发者工作流参考"}},[t._v("#")]),t._v(" 开发者工作流参考")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("克隆 dev 分支到本地 "),e("code",[t._v("git clone -b dev ...")])])]),t._v(" "),e("li",[e("p",[t._v("新建分支")]),t._v(" "),e("ul",[e("li",[t._v("获取 dev 分支最新代码"),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取 dev 分支最新代码")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout dev\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n")])])])]),t._v(" "),e("li",[t._v("新建一个特性分支"),e("code",[t._v("git branch feature/xxx")])]),t._v(" "),e("li",[t._v("切换到该特性分支开发"),e("code",[t._v("git checkout feature/xxx")])])])]),t._v(" "),e("li",[e("p",[t._v("提交分支")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# git commit -a -m ""   直接提交到本地版本库')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# git commit -am ""     直接提交到本地版本库 -a和-m可以简写')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-u")]),t._v(" origin feature/xxx"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("/"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])])])]),t._v(" "),e("li",[e("p",[t._v("与 dev 主干同步")]),t._v(" "),e("p",[t._v("分支的开发过程中，要经常与 dev 主干保持同步")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取 dev 分支最新代码")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout dev\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换回当前开发的特性分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout feature/xxx\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并 dev 分支到当前分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge dev\n")])])])]),t._v(" "),e("li",[e("p",[t._v("发出 Pull Request")]),t._v(" "),e("ul",[e("li",[t._v("最后一次 "),e("strong",[t._v("与 dev 主干同步")]),t._v(" 工作，")]),t._v(" "),e("li",[t._v("提交到远程仓库以后，发出 Pull Request 到 dev 分支，然后请求 Code Review ，确认可以合并到 dev 分支")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最后进行一次步骤三的同步工作")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交到远程仓库")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout feature/xxx\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin feature/xxx\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在 GitHub/Gitee 管理界面创建 Pull Request，等待管理员进行 Code Review")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("清理分支")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 首先，切换回 dev 分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout dev\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 先删除远程特性分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" feature/xxx\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 再删除本地特性分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" feature/xxx\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"四、解决冲突"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、解决冲突"}},[t._v("#")]),t._v(" 四、解决冲突")]),t._v(" "),e("p",[t._v("多个分支修改了同一个文件的内容或名称，会产生冲突，但是已经修改了的不同文件的部分，是不会产生冲突，直接合并即可。")]),t._v(" "),e("p",[t._v("预防冲突；规范、多次使用 "),e("code",[t._v("git pull")]),t._v("、"),e("code",[t._v("git fetch")]),t._v("、"),e("code",[t._v("git diff")])])])}),[],!1,null,null,null);e.default=n.exports}}]);